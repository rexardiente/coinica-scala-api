# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ket
GET     /ws                                  	controllers.HomeController.socket

GET     /                                        controllers.HomeController.index
# Login API
POST    /donut/api/v1/login/add                   controllers.AdminController.addLogin
PUT     /donut/api/v1/login/update               controllers.AdminController.updateLogin(id: UUID)
POST    /donut/api/v1/login/remove                controllers.AdminController.removeLogin(id: UUID)

GET     /donut/api/v1/login/weekly               controllers.AdminController.logindate(startdate: java.time.Instant, enddate: Option[java.time.Instant], limit: Int ?= 50, offset: Int ?= 0)
GET     /donut/api/v1/login/daily                controllers.AdminController.logindate(startdate: java.time.Instant, enddate: Option[java.time.Instant], limit: Int ?= 50, offset: Int ?= 0)
GET     /donut/api/v1/login/monthly              controllers.AdminController.logindate(startdate: java.time.Instant, enddate: Option[java.time.Instant], limit: Int ?= 50, offset: Int ?= 0)

# Challenge API
#POST    /donut/api/v1/challenge/add                   controllers.HomeController.addChallenge
#PUT     /donut/api/v1/challenge/update               controllers.HomeController.updateChallenge(id: UUID)
#POST    /donut/api/v1/challenge/remove                controllers.HomeController.removeChallenge(id: UUID)

GET     /donut/api/v1/challenge               controllers.HomeController.getChallenge(date: java.time.Instant ?= java.time.Instant.now)
GET     /donut/api/v1/challenge/ranks/daily   controllers.HomeController.getDailyRanksChallenge()
# GET     /donut/api/v1/challenge/daily                controllers.HomeController.challengedaily(startdate: java.time.Instant, enddate: Option[java.time.Instant], limit: Int ?= 50, offset: Int ?= 0)
# GET     /donut/api/v1/challenge/monthly              controllers.HomeController.challengedate(startdate: java.time.Instant, enddate: Option[java.time.Instant], limit: Int ?= 50, offset: Int ?= 0)

# Ranking API
#POST    /donut/api/v1/ranking/add                   controllers.HomeController.addRanking
#PUT     /donut/api/v1/ranking/update               controllers.HomeController.updateRanking(id: UUID)
#POST    /donut/api/v1/ranking/remove                controllers.HomeController.removeRanking(id: UUID)
GET     /donut/api/v1/ranking/weekly               controllers.HomeController.rankingdate(startdate: java.time.Instant, enddate: Option[java.time.Instant], limit: Int ?= 50, offset: Int ?= 0)
GET     /donut/api/v1/ranking/daily                controllers.HomeController.rankingdaily(startdate: java.time.Instant, enddate: Option[java.time.Instant], limit: Int ?= 50, offset: Int ?= 0)
GET     /donut/api/v1/ranking/monthly              controllers.HomeController.rankingdate(startdate: java.time.Instant, enddate: Option[java.time.Instant], limit: Int ?= 50, offset: Int ?= 0)

# Referral API
POST   	/donut/api/v1/referral/apply              controllers.HomeController.applyReferralCode
GET    	/donut/api/v1/referral/history/:code      controllers.HomeController.getReferralHistory(code: String)

# Task API
GET     /donut/api/v1/task/daily                controllers.HomeController.getTodayTaskUpdates(user: String, game_id: UUID)
GET     /donut/api/v1/task/monthly                controllers.HomeController.getMonthlyTaskUpdates(user: String, game_id: UUID)
#GET     /donut/api/v1/task/weekly                controllers.HomeController.getWeeklyTaskUpdates(user: String, game_id: UUID)

# Game API
GET     /donut/api/v1/games                      controllers.HomeController.games
GET     /donut/api/v1/game/find                  controllers.HomeController.findGameByID(id: UUID)
POST    /donut/api/v1/game/add                   controllers.HomeController.addGame
PUT     /donut/api/v1/game/update              	 controllers.HomeController.updateGame(id: UUID)
POST    /donut/api/v1/game/remove                controllers.HomeController.removeGame(id: UUID)

# Genre API
GET     /donut/api/v1/genres                     controllers.HomeController.genres

# An example controller showing a sample home page
# WebsocGET     /donut/api/v1/genre/find         controllers.HomeController.findGenreByID(id: UUID)
POST    /donut/api/v1/genre/add                  controllers.HomeController.addGenre
PUT     /donut/api/v1/genre/update               controllers.HomeController.updateGenre(id: UUID)
POST    /donut/api/v1/genre/remove               controllers.HomeController.removeGenre(id: UUID)

# Transaction API
GET    /donut/api/v1/txs               			 	 controllers.HomeController.transactions(start: java.time.Instant, end: Option[java.time.Instant], limit: Int ?= 10, offset: Int ?= 0)
GET    /donut/api/v1/tx/find              	 	 controllers.HomeController.transactionByTraceID(trace_id: String)

# Ghost Quest API
GET   /donut/api/v1/game/ghost-quest/character/:id   controllers.HomeController.getCharacterByID(id: String)
GET   /donut/api/v1/game/ghost-quest/character/:user/:id controllers.HomeController.getCharacterByUserAndID(user: String, id: String)
GET   /donut/api/v1/game/ghost-quest/characters       controllers.HomeController.getAllCharacters()
GET   /donut/api/v1/game/ghost-quest/characters/:user     controllers.HomeController.getCharactersByUser(user: String)
GET   /donut/api/v1/game/ghost-quest/characters/:user/all controllers.HomeController.getAllCharactersByUser(user: String)
GET   /donut/api/v1/game/ghost-quest/history/characters/:user  controllers.HomeController.getCharacterHistoryByUser(user: String)
GET   /donut/api/v1/game/ghost-quest/history/character/:user/:id  controllers.HomeController.getCharacterHistoryByUserAndID(user: String, id: String)
GET   /donut/api/v1/game/ghost-quest/history/games     controllers.HomeController.getAllGQGameHistory()
GET   /donut/api/v1/game/ghost-quest/history/games/:user   controllers.HomeController.getGQGameHistoryByUser(user: String)
GET   /donut/api/v1/game/ghost-quest/history/game/id/:id  controllers.HomeController.getGQGameHistoryByGameID(id: String)
GET   /donut/api/v1/game/ghost-quest/history/game/:user/:id   controllers.HomeController.getGQGameHistoryByUserAndCharacterID(user: String, id: String)

GET   /donut/api/v1/game/ghost-quest/characters/rank/earn/lifetime controllers.HomeController.highEarnCharactersAllTime
GET   /donut/api/v1/game/ghost-quest/characters/rank/earn/daily controllers.HomeController.highEarnCharactersDaily
GET   /donut/api/v1/game/ghost-quest/characters/rank/earn/weekly controllers.HomeController.highEarnCharactersWeekly

GET   /donut/api/v1/game/ghost-quest/characters/rank/win-streak/weekly controllers.HomeController.winStreakPerDay
GET   /donut/api/v1/game/ghost-quest/characters/rank/win-streak/daily controllers.HomeController.winStreakPerWeekly
GET   /donut/api/v1/game/ghost-quest/characters/rank/win-streak/lifetime controllers.HomeController.winStreakLifeTime

# Overall History
GET   /donut/api/v1/game/all/history controllers.HomeController.overAllHistory(limit: Int ?= 10)

# TODO: News with pagination
GET   /donut/api/v1/news controllers.HomeController.news

# User Account
GET   /donut/api/v1/account/user/:user controllers.HomeController.userAccount(user)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
