# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ket
GET     /ws                                  	controllers.HomeController.socket

GET     /                           					controllers.HomeController.index()
# Login API

POST   	/donut/api/v1/sign-in            	controllers.HomeController.signIn(verify: Boolean ?= false)
POST   	/donut/api/v1/sign-up            	controllers.HomeController.signUp()
GET   	/donut/api/v1/sign-out           	controllers.SecureActionController.signOut()
GET   	/donut/api/v1/login/token/renew   controllers.SecureActionController.renewLoginSessionToken()

# Challenge API
#POST    /donut/api/v1/challenge/add                   controllers.HomeController.addChallenge
#PUT     /donut/api/v1/challenge/update               controllers.HomeController.updateChallenge(id: UUID)
#POST    /donut/api/v1/challenge/remove                controllers.HomeController.removeChallenge(id: UUID)

GET     /donut/api/v1/challenge               controllers.HomeController.getChallenge(date: Option[java.time.Instant])
GET     /donut/api/v1/challenge/ranks/daily   controllers.HomeController.getDailyRanksChallenge()
# GET     /donut/api/v1/challenge/daily                controllers.HomeController.challengedaily(startdate: java.time.Instant, enddate: Option[java.time.Instant], limit: Int ?= 50, offset: Int ?= 0)
# GET     /donut/api/v1/challenge/monthly              controllers.HomeController.challengedate(startdate: java.time.Instant, enddate: Option[java.time.Instant], limit: Int ?= 50, offset: Int ?= 0)

# Ranking API
#POST    /donut/api/v1/ranking/add                  controllers.HomeController.addRanking
#PUT     /donut/api/v1/ranking/update               controllers.HomeController.updateRanking(id: UUID)
#POST    /donut/api/v1/ranking/remove               controllers.HomeController.removeRanking(id: UUID)
GET     /donut/api/v1/ranking/daily               	controllers.HomeController.getRankingDaily()
GET     /donut/api/v1/ranking/monthly               controllers.HomeController.getRankingHistory()

# Referral API
POST   	/donut/api/v1/referral/apply              controllers.SecureActionController.applyReferralCode
GET    	/donut/api/v1/referral/history/:code      controllers.SecureActionController.getReferralHistory(code: String)

# Task API
GET     /donut/api/v1/task/daily                	controllers.SecureActionController.getTodayTaskUpdates(game_id: UUID)
GET     /donut/api/v1/task/monthly                controllers.SecureActionController.getMonthlyTaskUpdates(game_id: UUID)
#GET     /donut/api/v1/task/weekly                controllers.HomeController.getWeeklyTaskUpdates(user: String, game_id: UUID)

# Game API
GET     /donut/api/v1/games                      	controllers.HomeController.games
GET     /donut/api/v1/game/find                  	controllers.HomeController.findGameByID(id: UUID)
#POST    /donut/api/v1/game/add                  	controllers.HomeController.addGame
#PUT     /donut/api/v1/game/update              	controllers.HomeController.updateGame(id: UUID)
#POST    /donut/api/v1/game/remove                controllers.HomeController.removeGame(id: UUID)

# Genre API
GET     /donut/api/v1/genres                     controllers.HomeController.genres

# An example controller showing a sample home page
# WebsocGET     /donut/api/v1/genre/find         	controllers.HomeController.findGenreByID(id: UUID)
#POST    /donut/api/v1/genre/add                  controllers.HomeController.addGenre
#PUT     /donut/api/v1/genre/update               controllers.HomeController.updateGenre(id: UUID)
#POST    /donut/api/v1/genre/remove               controllers.HomeController.removeGenre(id: UUID)

# Transaction API
GET    /donut/api/v1/txs               			 	 controllers.HomeController.transactions(start: java.time.Instant, end: Option[java.time.Instant], limit: Int ?= 10, offset: Int ?= 0)
GET    /donut/api/v1/tx/find              	 	 controllers.HomeController.transactionByTraceID(trace_id: String)

# Ghost Quest API
GET   /donut/api/v1/game/ghost-quest/character/:id   							controllers.GameActionController.getCharacterByID(id: String)
GET   /donut/api/v1/game/ghost-quest/character/:user/:id 					controllers.GameActionController.getCharacterByUserAndID(user: UUID, id: String)
#GET   /donut/api/v1/game/ghost-quest/characters       						controllers.GameActionController.getAllCharacters()
GET   /donut/api/v1/game/ghost-quest/characters/:user     				controllers.GameActionController.getCharactersByUser(user: UUID)
GET   /donut/api/v1/game/ghost-quest/characters/:user/all 				controllers.GameActionController.getAllCharactersByUser(user: UUID)
GET   /donut/api/v1/game/ghost-quest/history/characters/:user  		controllers.GameActionController.getCharacterHistoryByUser(user: UUID)
GET   /donut/api/v1/game/ghost-quest/history/character/:user/:id  controllers.GameActionController.getCharacterHistoryByUserAndID(user: UUID, id: String)
GET   /donut/api/v1/game/ghost-quest/history/games     			controllers.GameActionController.getAllGQGameHistory()
GET   /donut/api/v1/game/ghost-quest/history/games/:user   	controllers.GameActionController.getGQGameHistoryByUser(user: UUID)
GET   /donut/api/v1/game/ghost-quest/history/game/id/:id  	controllers.GameActionController.getGQGameHistoryByGameID(id: String)
GET   /donut/api/v1/game/ghost-quest/history/game/:user/:id   controllers.GameActionController.getGQGameHistoryByUserAndCharacterID(user: UUID, id: String)

GET   /donut/api/v1/game/ghost-quest/characters/rank/earn/lifetime 	controllers.GameActionController.highEarnCharactersAllTime
GET   /donut/api/v1/game/ghost-quest/characters/rank/earn/daily 		controllers.GameActionController.highEarnCharactersDaily
GET   /donut/api/v1/game/ghost-quest/characters/rank/earn/weekly 		controllers.GameActionController.highEarnCharactersWeekly

GET   /donut/api/v1/game/ghost-quest/characters/rank/win-streak/weekly 		controllers.GameActionController.winStreakPerDay
GET   /donut/api/v1/game/ghost-quest/characters/rank/win-streak/daily 		controllers.GameActionController.winStreakPerWeekly
GET   /donut/api/v1/game/ghost-quest/characters/rank/win-streak/lifetime 	controllers.GameActionController.winStreakLifeTime

# Treasurehunt API
POST  /donut/api/v1/game/treasurehunt/start 		controllers.GameActionController.thGameStart
GET  	/donut/api/v1/game/treasurehunt/withdraw  controllers.GameActionController.thWithdraw

# Overall History
#GET   /donut/api/v1/game/all/history controllers.SecureActionController.overAllHistory(limit: Int ?= 10)
GET   /donut/api/v1/game/all/history/:game controllers.SecureActionController.overAllHistoryByGameID(game: UUID)
GET   /donut/api/v1/game/all/history/:game/:user controllers.SecureActionController.gameHistoryByGameIDAndUser(game: UUID, user: UUID)

# TODO: News with pagination
GET   /donut/api/v1/news controllers.HomeController.news

# User Account
#GET   /donut/api/v1/account/user/:user 				controllers.SecureActionController.getAccountByName(user)
GET   /donut/api/v1/account/code/:code 					controllers.SecureActionController.getAccountByCode(code: String)
GET   /donut/api/v1/account/id/:id 							controllers.SecureActionController.getAccountByID(id: UUID)
# User Account Wallet
GET  	/donut/api/v1/account/wallets 						controllers.SecureActionController.getUserAccountWallet()
POST  /donut/api/v1/account/coin/deposit 				controllers.SecureActionController.coinDeposit()
POST  /donut/api/v1/account/coin/withdraw 				controllers.SecureActionController.coinWithdraw()

# coincap assets
GET  	/donut/api/v1/coincap/asset 							controllers.HomeController.getCoinCapAsset()

# VIP Account
GET   /donut/api/v1/vip 				controllers.SecureActionController.vipUser(id: UUID)

# Add Email Address Email Confirmation
GET   /donut/api/v1/user/email/confirm 					controllers.HomeController.emailVerification(code: String)
POST  /donut/api/v1/user/email/update 					controllers.SecureActionController.updateEmailAccount()
POST  /donut/api/v1/user/email/add 							controllers.SecureActionController.addEmailAccount()
# Reset Password Email Confirmation
#GET   /donut/api/v1/user/reset/password/confirm 	controllers.HomeController.resetPasswordVerification(code: String)
POST  /donut/api/v1/user/password/reset/send 			controllers.HomeController.resetPassword()
GET   /donut/api/v1/user/password/reset/confirm 	controllers.HomeController.resetPasswordVerification(code: String)
POST  /donut/api/v1/user/password/reset/submit 		controllers.HomeController.submitNewPassword()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
GET     /stylesheets/*file          @controllers.Assets.at(path="/public/stylesheets", file)
