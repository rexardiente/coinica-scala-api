play.http.secret.key="X2aNUZPThOamL2skZO5J]tJOiPKLj[26@Pd5pbNUd?3`Wgg>zUcB]BBKucq3UC1F"
# https://www.playframework.com/documentation/latest/Configuration

# You can disable evolutions for a specific datasource if necessary
play {
  server.http.idleTimeout=180s
  modules {
    enabled += utils.SchemaGenerationModule
    enabled += utils.VIPModule
    enabled += utils.DBMockupModule
    enabled += utils.SchedulerModule
  }
  evolutions {
    db.default.enabled = true
  }

  http {
    idleTimeout=180s
  # Session configuration
    session = {

      # The cookie name
      cookieName = "EGS_SESSION"

      # Whether the secure attribute of the cookie should be set to true
      secure = false

      # The max age to set on the cookie.
      # If null, the cookie expires when the user closes their browser.
      # An important thing to note, this only sets when the browser will discard the cookie.
      maxAge = null

      # Whether the HTTP only attribute of the cookie should be set to true
      httpOnly = false

      # The value of the SameSite attribute of the cookie. Set to null for no SameSite attribute.
      # Possible values are "lax" and "strict". If misconfigured it's set to null.
      sameSite = "lax"

      # The domain to set on the session cookie
      # If null, does not set a domain on the session cookie.
      domain = null

      # The session path
      # Must start with /.
      # path = ${play.http.context}

      jwt {
        # The JWT signature algorithm to use on the session cookie
        # uses 'alg' https://tools.ietf.org/html/rfc7515#section-4.1.1
        # signatureAlgorithm = "HS256"

        # The time after which the session is automatically invalidated.
        # Use 'exp' https://tools.ietf.org/html/rfc7519#section-4.1.4
        # expiresAfter = ${play.http.session.maxAge}

        # The amount of clock skew to accept between servers when performing date checks
        # If you have NTP or roughtime synchronizing between servers, you can enhance
        # security by tightening this value.
        # clockSkew = 5 minutes

        # The claim key under which all user data is stored in the JWT.
        # dataClaim = "data"
      }
    }
  }
}

akka {
  quartz {
    schedules {
      WalletTxScheduler {
        description = "A cron job that fires off every 5 Minutes"
        expression = "0 0/2 * * * ?"
      }
    }
  }
}

akka.http {
  server {
    idle-timeout = 180s
  }
}
platform {
  # https://beincrypto.com/convert/eos-to-usd?amount=1#:~:text=The%20conversion%20value%20for%201%20EOS%20to%206.5%20USD.
  EOS_TO_USD_CONVERSION = 6.5
  # base currency must be set first on the list
  # the rest are supported currencies
  # be sure that supported.currencies and supported.symbols has same value
  supported.currencies = ["usd-coin", "ethereum", "bitcoin"]
  supported.symbols = ["USDC", "ETH", "BTC"]
  games {
    # [code, table, scope]
    contracts {
      ghostquest = ["ghostquest", "users", "ghostquest", "0f335579-1bf8-4f9e-8ede-eb204f5c0cba", "GQ"]
      treasurehunt = ["treasurehunt", "users", "treasurehunt", "1b977a2b-842e-430b-bd1b-c0bd3abe1c55", "TH"]
      mahjonghilo = ["mahjonghilo", "users", "mahjonghilo", "74cd374c-6126-495a-a8a3-33db87caa511", "MJ"]
    }
    # in minute
    GQ.battle.timer = 15
  }
  # in hour
  default.system.scheduler = 24
}
eosio {
  eosjs.node.server {
    uri = "http://151.106.113.207:3006"
  }
  #wallets {
  #  public {
  #    default.key = "EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV"
  #  }
  #  private {
  #    server.default.key = "PW5J1SRuNCGqutRsm5RRvTze4CCH8mVX5aShNcdWSNUTZLGo2FB1s"
  #    local.default.key = "PW5J9srswAQKDMAhCKHer5pdKczsq5heMafi9DSqT28YrgvuDXApV"
  #  }
  #}
  #uri {
  #  keosd = "http://127.0.0.1:8889"
  #  nodeos = "http://127.0.0.1:8888"
  #  path {
  #    sign_transaction = "/v1/wallet/sign_transaction"
  #    get_info = "/v1/chain/get_info"
  #    get_table_rows = "/v1/chain/get_table_rows"
  #    abi_json_to_bin = "/v1/chain/abi_json_to_bin"
  #    abi_bin_to_json = "/v1/chain/abi_bin_to_json"
  #    get_block = "/v1/chain/get_block"
  #  }
  #}
  # chain.id = "8a34ec7df1b8cd06ff4a8abbaa7cc50300823350cadc59ab296cb00d104d2b8f"
}

# Default DB - PostgreSQL
slick.dbs {
  default.profile="utils.db.PostgresDriver$"
  default.db.driver="org.postgresql.Driver"
  default.db.url="jdbc:postgresql://127.0.0.1/eos-game-store-api"
  default.db.user="eos-game-store-api"
  default.db.password="eos-game-store-api"
  default.db.keepAliveConnection=true
}

play.http.secret.key=${?APPLICATION_SECRET}

play.filters.enabled += "play.filters.cors.CORSFilter"
play.filters.hosts {
  # Allow requests to example.com, its subdomains, and localhost:9000.
  allowed = ["127.0.0.1:9000", "37.44.244.221:9000", "151.106.113.207:9000", "151.106.113.207:9001", "151.106.113.207:3006"]
  # Default Custom hosts, port and protocol
  host = ["127.0.0.1", "37.44.244.221", "151.106.113.207", "3.34.146.80"]
  port = [9000, 9001, 5000]
  protocol = ["http", "https"]
}

play.filters.disabled += "play.filters.csrf.CSRFFilter"
filters.csrf.header.protectHeaders = null
play.filters.csrf.header.bypassHeaders {
  X-Requested-With = "*"
  Csrf-Token = "nocheck"
}

play.mailer {
  host = "smtp.gmail.com" // (mandatory)
  port = 587 // (defaults to 25)
  ssl = no // (defaults to no)
  tls = yes // (defaults to no)
  tlsRequired = no // (defaults to no)
  user = "eosgamestore@gmail.com" // (optional)
  password = "cebutallinn" // (optional)
  debug = yes // (defaults to no, to take effect you also need to set the log level to "DEBUG" for the "play.mailer" logger)
  timeout = null // (defaults to 60s in milliseconds)
  connectiontimeout = null // (defaults to 60s in milliseconds)
  mock = no // (defaults to no, will only log all the email properties instead of sending an email)
  props {
    // Additional SMTP properties used by JavaMail. Can override existing configuration keys from above.
    // A given property will be set for both the "mail.smtp.*" and the "mail.smtps.*" prefix.
    // For a list of properties see:
    // https://javaee.github.io/javamail/docs/api/com/sun/mail/smtp/package-summary.html#properties

    // Example:
    // To set the local host name used in the SMTP HELO or EHLO command:
    // localhost = 127.0.0.1
    // Results in "mail.smtp.localhost=127.0.0.1" and "mail.smtps.localhost=127.0.0.1" in the JavaMail session.
  }
  expiration = 5
  random.code.limit = 363
}